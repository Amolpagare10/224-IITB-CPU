library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


entity temp_1 is 
	port(
		alu_a: out std_logic_vector(15 downto 0);
		reg: in std_logic_vector(15 downto 0);
		clk: in std_logic;
		data_1: out std_logic_vector(15 downto 0);
		data_2: in std_logic_vector(15 downto 0);
		s: in std_logic_vector(3 downto 0);
		alu_in: in std_logic_vector(15 downto 0);
		reg_out: out std_logic_vector(15 downto 0);
		mem_a: out std_logic_vector(15 downto 0);
		signed_extender_6: in std_logic_vector(15 downto 0)
	);
end temp_1;

architecture exe of temp_1 is
signal t1: std_logic_vector(15 downto 0);
begin
	read_proc: process(t1, s)
	begin
		if (s="0010" or s="0100" or s="1010") then
		alu_a <= t1;
		end if;
	end process;

	write_proc: process(clk)
	begin 
		if(falling_edge(clk)) then
			if (s="1110" or s="0001") then
			t1 <= data_1;
			
			end if;
		end if;
	end process;
end exe;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


entity temp_2 is 
	port(
		alu_b: out std_logic_vector(15 downto 0);
		reg: in std_logic_vector(15 downto 0);
		clk: in std_logic;
		data_1: out std_logic_vector(15 downto 0);
		data_2: in std_logic_vector(15 downto 0);
		s: in std_logic_vector(3 downto 0);
		alu_in: in std_logic_vector(15 downto 0);
		reg_out: out std_logic_vector(15 downto 0);
		mem_a: out std_logic_vector(15 downto 0);
		signed_extension_6:in std_logic_vector();
	);
end temp_2;

architecture exe of temp_2 is
signal t2: std_logic_vector(15 downto 0);
begin
	read_proc: process(t2, s)
	begin
		if (s="0010" or s="1010") then
		alu_b <= t2;
		elsif(s="0111") then
		mem_a<=t2;
		end if;
	end process;

	write_proc: process(clk)
	begin 
		if(falling_edge(clk)) then
			if (s="0001") then
			t2 <= data_2;
			elsif (s="1110") then
			signed_extender_6<=t2;
			
			end if;
		end if;
	end process;
end exe;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity temp_3 is 
	port(
		alu_c: out std_logic_vector(15 downto 0);
		reg: in std_logic_vector(15 downto 0);
		clk: in std_logic;
		data_3: out std_logic_vector(15 downto 0);
		
		s: in std_logic_vector(3 downto 0);
		alu_in: in std_logic_vector(15 downto 0);
		reg_out: out std_logic_vector(15 downto 0);
		mem_data: out std_logic_vector(15 downto 0);
		mem_add:out std_logic_vector(15 downto 0);
	);
end temp_3;

architecture exe of temp_3 is
signal t3: std_logic_vector(15 downto 0);
begin
	read_proc: process(t3, s)
	begin
		if (s="0010" or s="0100") then
		alu_c <= t3;
		end if;
	end process;

	write_proc: process(clk)
	begin 
		if(falling_edge(clk)) then
			if (s="0110") then
			t3 <= data_3;
			elsif (s="0101") then 
			t3<=mem_add;
			elsif (s="0111") then 
			t3<=mem_data;
			
			
			end if;
		end if;
	end process;
end exe;